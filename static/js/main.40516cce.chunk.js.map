{"version":3,"sources":["assets/BlueUmbrella.png","assets/PinkUmbrella.png","assets/YellowUmbrella.png","assets/UploadIcon.svg","assets/Loader.svg","constants.js","components/loader/index.js","components/umbrella/index.js","components/colorButtons/index.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","UmbrellaMapping","blue","BlueUmbrella","pink","PinkUmbrella","yellow","YellowUmbrella","LoaderIcon","fill","className","aria-hidden","ocusable","role","viewBox","width","height","version","xmlns","d","dimensions","Umbrella","color","logo","toggleUploadIcon","useState","imageLoading","setImageLoading","src","setSrc","UmbrellaImageClass","classNames","LoaderClass","updateUmbrellaLogo","canvas","document","createElement","ctx","getContext","img","Image","onload","drawImage","logoImg","toDataURL","useEffect","setTimeout","alt","ColorButtons","onChangeColor","getColorButtonClass","umbrellaColor","map","key","onClick","event","CustomizeUmbrella","setColor","fileLoading","setFileLoading","uploadButtonLoading","setUploadButtonLoading","file","setFile","fileName","setFileName","InputRef","createRef","UmbrellaClass","UploadIconClass","UploadButtonClass","CloseIconClass","e","type","ref","onChange","target","files","value","name","URL","createObjectURL","accept","style","display","Loader","UploadIcon","current","click","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40516cce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BlueUmbrella.c0d6051c.png\";","module.exports = __webpack_public_path__ + \"static/media/PinkUmbrella.d5e3c45b.png\";","module.exports = __webpack_public_path__ + \"static/media/YellowUmbrella.ae59431f.png\";","module.exports = __webpack_public_path__ + \"static/media/UploadIcon.bd7a6658.svg\";","module.exports = __webpack_public_path__ + \"static/media/Loader.73894a0a.svg\";","import BlueUmbrella from './assets/BlueUmbrella.png';\nimport PinkUmbrella from './assets/PinkUmbrella.png';\nimport YellowUmbrella from './assets/YellowUmbrella.png';\n\nexport const colors = ['blue', 'pink', 'yellow'];\n\nexport const UmbrellaMapping = {\n\tblue: BlueUmbrella,\n\tpink: PinkUmbrella,\n\tyellow: YellowUmbrella\n};","import React from 'react';\nimport './Loader.css';\n\nconst LoaderIcon = ({ fill, className }) => (\n  <svg\n    className={`Loader--${fill} ${className}`}\n    aria-hidden=\"true\"\n    ocusable=\"false\"\n    role=\"presentation\"\n    viewBox=\"0 0 28.3 31.2\"\n    width=\"28.3\"\n    height=\"31.2\"\n    version=\"1.1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M25.1 23.6c-.3.1-.6.2-1 .2-.6.1-1.3 0-2.1.1s-1.7.3-2.6.8c-.8.5-1.4 1.1-1.9 1.6-.7.9-1.1 1.7-1.5 2.2-.2.3-.4.4-.7.6-.2.1-.4.2-.8.2v-13L26 22.9c-.3.3-.6.5-.9.7m-11.3 5.9c-.5-.1-.8-.2-1-.4-.2-.2-.5-.4-.7-.7-.3-.5-.7-1.1-1.2-1.7-.5-.7-1.1-1.3-2.1-1.9-.8-.5-1.6-.7-2.3-.8-1.1-.2-2-.1-2.7-.2l-.9-.3c-.2-.1-.4-.3-.6-.6l11.4-6.6v13.2zM1.7 21.3c0-.3.1-.6.2-1 .2-.5.6-1.1.9-1.9.3-.8.6-1.7.6-2.8v-.1c0-1.5-.6-2.6-1-3.5l-.6-1.2c-.1-.4-.2-.7-.2-1 0-.3.1-.6.2-1l11.4 6.6-11.3 6.8c-.1-.4-.2-.7-.2-.9M3.2 7.6c.3-.1.6-.2 1-.2.6-.1 1.3 0 2.1-.1.7-.2 1.6-.4 2.5-.9.8-.5 1.4-1.1 1.9-1.6.7-.9 1.1-1.7 1.5-2.2.2-.3.4-.4.7-.6.2-.1.5-.2.8-.2V15L2.3 8.3c.3-.4.6-.6.9-.7m11.3-5.9c.5 0 .8.2 1 .4.2.2.5.4.7.7.3.5.7 1.1 1.2 1.7.5.7 1.1 1.3 2.1 1.9.8.5 1.6.7 2.4.8 1.1.1 2 .1 2.7.2l.9.3c.2.1.4.3.6.6l-11.4 6.6V1.7zm12.1 8.2c0 .3-.1.6-.2 1-.2.5-.6 1.1-.9 1.9-.3.8-.6 1.7-.6 2.8v.2c0 1.5.5 2.6 1 3.5l.6 1.2c.1.4.2.7.2 1 0 .3-.1.6-.2.9l-11.4-6.6L26.3 9c.2.4.3.7.3.9m.4 7.8c-.3-.6-.5-1.3-.5-2v-.1c0-1 .4-1.8.8-2.7.2-.4.5-.8.6-1.3.2-.5.3-1 .3-1.6 0-.7-.2-1.4-.6-2.1-.5-.8-1.1-1.4-1.8-1.7-.5-.2-1-.3-1.5-.4-.7-.1-1.4-.1-2.1-.1-.7-.1-1.3-.2-1.9-.6-.6-.3-1-.7-1.4-1.2-.5-.9-.9-1.7-1.6-2.5-.3-.4-.7-.8-1.3-1-.5-.3-1.1-.4-1.9-.4-1 0-1.8.2-2.4.7-.5.3-.8.7-1.1 1.1-.4.6-.7 1.2-1.1 1.7-.4.5-.8 1-1.5 1.4-.6.4-1.2.5-1.8.6-.9.1-1.8 0-2.8.2-.5.1-1 .3-1.5.7-.5.3-.9.8-1.3 1.4C.2 8.5 0 9.3 0 10c0 .6.1 1.1.3 1.6.3.7.7 1.3 1 2 .3.6.5 1.3.5 2.1v.1c0 1.1-.4 1.8-.8 2.7-.2.4-.5.8-.6 1.3-.2.5-.3 1-.3 1.6 0 .7.2 1.4.6 2.1.5.8 1.1 1.4 1.8 1.7.5.2 1 .3 1.5.4.7.1 1.4.1 2.1.1.7.1 1.3.2 2 .6.6.3 1 .7 1.4 1.2.5.7.9 1.5 1.6 2.3.3.4.7.7 1.3 1 .5.3 1.2.4 1.9.4 1 0 1.8-.3 2.4-.7.5-.3.8-.7 1.1-1.1.4-.6.8-1.2 1.2-1.7.4-.5.8-1 1.5-1.4.6-.3 1.1-.5 1.7-.6.9-.1 1.8 0 2.8-.2.5-.1 1-.3 1.5-.6s.9-.8 1.3-1.4c.4-.7.6-1.5.6-2.1 0-.6-.1-1.1-.3-1.6-.5-.9-.8-1.5-1.1-2.1\"></path>\n  </svg>\n);\n\nexport default LoaderIcon;","import React, { useEffect, useState, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport \"./Umbrella.css\";\nimport { UmbrellaMapping } from \"../../constants\";\nimport Loader from \"../loader\";\n\nconst dimensions = { height: 406, width: 451 };\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\n\nconst Umbrella = ({ color, logo, toggleUploadIcon }) => {\n  const [imageLoading, setImageLoading] = useState(false);\n  const [src, setSrc] = useState(UmbrellaMapping[color]);\n\n  const UmbrellaImageClass = classNames({\n    [\"Umbrella-image\"]: true,\n    [\"d-none\"]: imageLoading,\n  });\n\n  const LoaderClass = classNames({\n    [\"Umbrella-loading\"]: imageLoading,\n    [\"d-none\"]: !imageLoading,\n  });\n\n  // Merge Umbrella Image and Logo together using canvas\n  const updateUmbrellaLogo = () => {\n    const width = dimensions.width * 0.25;\n    const height = dimensions.height * 0.1;\n\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.src = UmbrellaMapping[color];\n    img.onload = () => {\n      canvas.width = dimensions.width;\n      canvas.height = dimensions.height;\n      ctx.drawImage(img, 0, 0, dimensions.width, dimensions.height);\n      const logoImg = new Image();\n      logoImg.src = logo;\n      logoImg.onload = () => {\n        ctx.drawImage(\n          logoImg,\n          dimensions.width / 2 - width / 2,\n          dimensions.height - height - 30,\n          width,\n          height\n        );\n        setSrc(canvas.toDataURL());\n        setImageLoading(false);\n        toggleUploadIcon(false);\n      };\n    }\n  };\n\n  useEffect(() => {\n    if (logo !== null) {\n      toggleUploadIcon(true);\n      setImageLoading(true);\n      setTimeout(updateUmbrellaLogo, 3000);\n    } else {\n      setSrc(UmbrellaMapping[color]);\n    }\n  }, [logo, color]);\n\n  return (\n    <div className=\"Umbrella\">\n      <img className={UmbrellaImageClass} src={src} alt=\"Umbrella\" />\n      <Loader fill={color} className={LoaderClass} />\n    </div>\n  );\n};\n\nexport default Umbrella;\n","import React from 'react';\nimport './ColorButtons.css';\nimport classNames from 'classnames';\nimport { colors } from '../../constants';\n\nconst ColorButtons = ({ color, onChangeColor }) => {\n\n  const getColorButtonClass = (umbrellaColor) => {\n    return classNames({\n      ['Color-swatch']: true,\n      [`Color-swatch--${umbrellaColor}`]: umbrellaColor,\n      [`Color-active--${color}`]: color === umbrellaColor\n    });\n  }\n\n  return (\n    <div className='Swatch'>\n      {\n        colors.map(umbrellaColor => (\n          <span\n            key={umbrellaColor}\n            className={getColorButtonClass(umbrellaColor)}\n            onClick={(event) => onChangeColor(event, umbrellaColor)}\n          >\n          </span>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default ColorButtons;","import React,{useState,createRef} from 'react';\nimport classNames from 'classnames';\nimport './index.css';\nimport Umbrella from './umbrella';\nimport ColorButtons from './colorButtons';\nimport UploadIcon from '../assets/UploadIcon.svg';\nimport Loader from '../assets/Loader.svg'\n\nconst CustomizeUmbrella = () => {\n  const [color, setColor] = useState('blue');\n  const [fileLoading, setFileLoading] = useState(false);\n  const [uploadButtonLoading, setUploadButtonLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState('');\n\n  const InputRef = createRef();\n\n  const UmbrellaClass = classNames({\n    ['Row']: true,\n    [`Row--${color}`]: color,\n  });\n\n  const UploadIconClass = classNames({\n    ['Upload-icon']: true,\n    ['Upload-icon-loading']: fileLoading || uploadButtonLoading\n  })\n\n  const UploadButtonClass = classNames({\n    ['Upload-Button']: true,\n    [`Upload-Button--${color}`]: color\n  });\n\n  const CloseIconClass = classNames({\n    ['material-icons']: true,\n    ['Close-icon']: true,\n    ['Close-icon--visible']: fileName !== '',\n  });\n\n  const onChangeColor = (e, umbrellaColor) => {\n    setColor(umbrellaColor);\n  };\n\n  const onChangeFile = (e) => {\n    const file = e.target.files[0];\n    e.target.value = null;\n\n    setFileLoading(true);\n    setTimeout(() => {\n      setFileName(file.name);\n      setFileLoading(false);\n      setFile(URL.createObjectURL(file));\n    }, 1000);\n  };\n\n  const onToggleUploadIcon = () => {\n    setUploadButtonLoading(!uploadButtonLoading);\n  }\n\n  const onRemoveLogo = () => {\n    setFile(null);\n    setFileName('');\n  }\n\n  const onUploadLogo = () => {\n    if (uploadButtonLoading || fileLoading) return;\n    InputRef && InputRef.current.click();\n  }\n\n  return (\n    <div className={UmbrellaClass}>\n      <div className='Col Col--6 Col--s-12 Col--xs-12' >\n        <Umbrella logo={file} color={color} toggleUploadIcon={onToggleUploadIcon}/>\n      </div>\n      <div className='Col Col--6 Col--s-12 Col--xs-12'>\n        <div className='Info-wrapper'>\n          <h1 className='Heading'>Custom Umbrella</h1>\n          <ColorButtons color={color} onChangeColor={onChangeColor} />\n          <p className='Text Text--strong'>Customize your umbrella</p>\n          <p className='Text Text--subtle'>Upload a logo for an instant preview</p>\n          <p className='Text Text--small Text--subtle'>.png and .jpg file only. Max file size is 5MB.</p>\n          <div className='Upload'>\n            <input\n              type=\"file\"\n              ref={InputRef}\n              onChange={onChangeFile}\n              accept=\"image/x-png,image/gif,image/jpeg,image/jpg\"\n              style={{ display: 'none' }}\n            />\n            <div className={UploadButtonClass}>\n              <img\n                src={fileLoading || uploadButtonLoading ? Loader : UploadIcon}\n                onClick={onUploadLogo}\n                className={UploadIconClass}\n                alt=\"Upload Logo\"\n                 />\n              <p className='Text--strong Text--ellipsis'>{fileName ? fileName : 'UPLOAD LOGO'}</p>\n              <div className='Upload-close'>\n                <i className={CloseIconClass} onClick={onRemoveLogo}>close</i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomizeUmbrella;\n","import React from 'react';\nimport CustomizeUmbrella from './components';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CustomizeUmbrella />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}